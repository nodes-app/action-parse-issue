name: Parse Issue
description: Parse issue to JSON format based on a template
branding:
  icon: activity
  color: blue
inputs:
  repository:
    description: GitHub repository (e.g. nodes-app/example)
    required: true
    default: ${{ github.repository }}
  issue-body:
    description: Issue body
    required: false
  issue-number:
    description: Issue number
    required: false
  issue-template:
    description: Issue template file basename (e.g. example.md) 
    required: true
  heading-level:
    description: Value heading level
    required: true
    default: '3'
outputs:
  expected-values:
    description: Expected values (from issue template)
    value: ${{ fromJSON(steps.parse.outputs.result).expected_values }}
  received-values: 
    description: Received values (from issue)
    value: ${{ fromJSON(steps.parse.outputs.result).received_values }}
  values: 
    description: All key-value pairs
    value: ${{ fromJSON(steps.parse.outputs.result).values }}
  problems:
    description: Problems with received values
    value: ${{ fromJSON(steps.parse.outputs.result).problems }}

runs:
  using: composite
  steps:
  
    - shell: bash
      id: parse
      env:
        REPOSITORY: ${{ inputs.repository }}
        ISSUE_BODY: ${{ inputs.issue-body }}
        ISSUE_NUMBER: ${{ inputs.issue-number }}
        ISSUE_TEMPLATE: ${{ inputs.issue-template }}
        HEADING_LEVEL: ${{ inputs.heading-level }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        if [[ -z "$ISSUE_BODY" ]]; then
          if [[ -z "$ISSUE_NUMBER" ]]; then
            echo 'must provide either issue-body or issue-number input'
            exit 1
          fi
          ISSUE_BODY=$(
            gh issue view \
              "$ISSUE_NUMBER" \
              --repo "$REPOSITORY" \
              --json body \
              --jq '.body'
          )
        fi

        issue_template_content=$(
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPOSITORY/contents/.github/ISSUE_TEMPLATE/$ISSUE_TEMPLATE" \
            --jq '.content' \
          | base64 -d
        )

        result=$(
          jq \
            --null-input \
            --argjson heading_level "$HEADING_LEVEL" \
            --arg issue_template_content "$issue_template_content" \
            --arg issue_body "$ISSUE_BODY" \
            '
            def toprimitivetype($type): (
              if $type == "string" then (
                .
              ) elif $type == "int" then (
                try (tonumber | floor)
                 catch null
              ) elif $type == "float" then (
                try tonumber
                catch null
              ) elif $type == "boolean" then (
                ascii_downcase as $raw_lower_case
                | 
                if any(["true", "yes", "y"][]; . == $raw_lower_case) then true
                elif any(["false", "no", "n"][]; . == $raw_lower_case) then false
                else null end
              ) else null end
            );
            def totype($type): (
              if ($type | endswith("array")) then (
                split("\\n")
                | map(toprimitivetype($type | sub("\\s*array$"; "")))
              ) else (
                toprimitivetype($type)
              ) end
            );
            def extractname: (
              capture("^(?<name>[[:word:][:space:]]+)\\s*\\*?\\s*(<!--([[:word:][:space:]]+)-->)?$")
              | .name
              | sub("^\\s*"; "")
              | sub("\\s*$"; "")
            );
            def extractrawvalue($name; $heading_prefix): (
              capture("\($heading_prefix)\\s*\($name).*\n(?<remaining_body>[[:print:][:space:]]+)")
              | .remaining_body
              | gsub("<!--.*-->"; "")
              | sub("\($heading_prefix)([[:print:][:space:]]*)$"; "")
              | sub("^\\s*"; "")
              | sub("\\s*$"; "")
            );
            ([range(3) | "#"] | join("")) as $heading_prefix
            | ["string", "int", "float", "boolean"] as $primitive_types
            |
            [
              $issue_template_content
              | split("\n")[]
              | select(
                  startswith($heading_prefix)
              )
              | sub("^\($heading_prefix)\\s*"; "")
              | sub("\\s*$"; "")
              | extractname as $name
              | (
                $name
                | ascii_downcase
                | gsub(" "; "_")
              ) as $key
              |
              (
                test("^([[:word:][:space:]]+)\\s*\\*\\s*(<!--([[:word:][:space:]]+)-->)?$")
              ) as $required
              |
              (
                if (
                  test("^([[:word:][:space:]]+)\\s*\\*?\\s*<!--([[:word:][:space:]]+)-->$")
                ) then (
                  capture("^([[:word:][:space:]]+)\\s*\\*?\\s*<!--(?<type_comment>[[:word:][:space:]]+)-->$")
                  | .type_comment
                  | sub("^\\s*"; "")
                  | sub("\\s*$"; "")
                  | . as $raw_type
                  | if (
                      any($primitive_types[]; . == $raw_type)
                      or any($primitive_types[]; . == ($raw_type | sub("\\s*array"; "")))
                    ) then $raw_type else "string" end
                ) else "string" end
              ) as $type
              |
              (
                $issue_template_content
                | extractrawvalue($name; $heading_prefix)
              ) as $raw_default_value
              |
              (
                $raw_default_value
                | totype($type)
              ) as $default_value
              |
              {
                "name": $name,
                "key": $key,
                "type": $type,
                "required": $required,
                "default_value": $default_value,
                "raw_default_value": $raw_default_value
              }
            ] as $expected_values
            |
            [
              $issue_body
              | split("\n")[]
              | select(
                  startswith($heading_prefix)
              )
              | sub("^\($heading_prefix)\\s*"; "")
              | sub("\\s*$"; "")
              | extractname as $name
              | (
                $issue_body
                | extractrawvalue($name; $heading_prefix)
              ) as $raw_value
              |
              [
                $expected_values[]
                | select(.name == $name)
              ][0] as $expected_value
              | (
                $expected_value != null
              ) as $expected
              | (
                $expected_value.key
              ) as $key
              | (
                $expected_value.type
              ) as $type
              | (
                $expected_value.required
              ) as $required
              | (
                $expected_value.default_value
              ) as $default_value
              | (
                $raw_value
                | if $expected then totype($type) else null end
              ) as $value
              |
              {
                "name": $name,
                "raw_value": $raw_value,
                "expected": $expected,
                "key": $key,
                "type": $type,
                "required": $required,
                "default_value": $default_value,
                "value": $value
              }
            ] as $received_values
            |
            (
              reduce $expected_values[] as $expected_value (
                {};
                .[$expected_value.key] = [
                  $received_values[]
                  | select(.key == $expected_value.key)
                ][0].value
              )
            ) as $values
            |
            (
              [
                $expected_values[]
                | select(
                  .name as $name
                  | any($received_values[]; .name == $name)
                  | not
                )
                | .name
              ] as $missing_value_names
              |
              [
                $received_values[]
                | select(
                  .name as $name
                  | any($expected_values[]; .name == $name)
                  | not
                )
                | .name
              ] as $superfluous_value_names
              |
              [
                $expected_values[]
                | select(
                  .name as $name
                  | .type as $type
                  | .required
                  and (
                    any($missing_value_names[]; . == $name)
                    | not
                  )
                  and (
                    [
                      $received_values[]
                      | select(.name == $name)
                    ][0].value as $value
                    | 
                    if $type == "string" then (
                      $value == "" 
                    ) else (
                      $value == null
                    ) end
                  )
                )
                | .name
              ] as $empty_required_value_names
              |
              {
                "missing_value_names": $missing_value_names,
                "superfluous_value_names": $superfluous_value_names,
                "empty_required_value_names": $empty_required_value_names
              }
            ) as $problems
            |
            {
              "expected_values": $expected_values,
              "received_values": $received_values,
              "values": $values,
              "problems": $problems
            }
            '
        )

        echo "::set-output name=result::$result"
